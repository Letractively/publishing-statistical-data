#summary Issue: Handling of multiple measures

== Background ==

This concerns the representation of datasets that contain multiple measures.
In particular how the data cube vocabulary can be applied to non-statistical
datasets in which each individual "observation" would normally be thought of as
having multiple measured facets  (e.g. the weight, cost and
dimensions of a single shipment as opposed to aggregate statistical measures
of shipment weights and costs). Such situations arise with OLAP cubes, 
sensor measurements, pollution sampling measurements etc.

The background is given in Issue 40.

== Principles ==

   * Any generalizations of the Data Cube vocabulary should not prevent its specialization to SDMX.

   * The set of dimensions in the DSD should continue to uniquely identify a single `Observation`.

   * The measures should (continue to) be represented as specializations of `qb:ComponentProperty` and so be RDF properties. We should be able to use these properties directly on observations. 

   * It should be possible, indeed straight forward, to model statistical sets with multiple measures using the SDMX approach of having a dimensions which selects the measure and a single measure value per dimension. We might call this the *measure dimension* (MD) modelling approach.

   * It should also be possible., for non-statistical sets, to permit multiple measures to be attached to a single observation if that is the appropriate modelling for that dataset. This generality would not be available within the SDMX specalization. We might call this the *multi-measure observations* (MMO) modelling approach.

   * The DSD structure should match the RDF structure. So if we declare a measure on the DSD it should be usable on observations within datasets which use that DSD. 
  
   * We want to avoid redundant duplication with the DSD. In particular in the RDF representation of the MD approach declaring the measures in the DSD should be sufficient and it not be *necessary* (though permitted) to define a code list for measure dimension since in the RDF case those declarations in fact make up the code list.

== Design ==

=== Basics ===

Measures are instances of `qb:MeasureProperty` which in turn is a sub-class of `qb:ComponentProperty`.

If a measure is declared within the DSD then each observation in the corresponding data sets is able to use that property to denote the measured value.
Thus defining a measure `eg:lifeExpectancy` means that an observation would be able to directly state facts like:
{{{
  dataset:obs1 a qb:Observation;
      # .. dimensions and attributes 
      eg:lifeExpectancy 71.5 ;
      .
}}}

=== Measure dimension data sets ===

For a statistical data set, especially ones already available as SDMX, or for other similar data sets then one can use the "measure dimension" representation.

In the DSD the publisher should declare a dimension to act as the measure dimension.

The measure dimension will be an instance of `qb:MeasureDimensionProperty` (a sub class of `qb:DimensionProperty`). This measure dimension may have a concept and code list associated with it in the usual way, though in practice in SDMX the concept is very frequently the COG concept of OBS_VALUE.

For convenience we provide a single pre-defined measure dimension `qb:measureType`. This would correspond to the SDMX COG concept OBS_VALUE (and this corespondance can be stated formally in the SDMX extension). For data sets not already in SDMX then there may not be a existing code list corresponding to the enumeration of measures. In the special case of using `qb:measureType` as the measure dimension then the set of allowed measures is assumed to be those measures declared with the DSD. There is no need to define a separate code list or enumerated class to duplicate this information.

In this form of data set the selected measure on each observation remains that of the corresponding RDF property.

For example, given a DSD like:
{{{
eg:dsd1 a qb:DataStructureDefinition;
    rdfs:comment "shippments by time"@en;
    qb:component 
        [ qb:componentProperty  sdmx-dimension:refTime; ],
        [ qb:componentProperty  eg-measure:quantity; ],
        [ qb:componentProperty  eg-measure:weight; ],
        [ qb:componentProperty  qb:measureType; ];
    .
}}}

Then a typical set of observations might look like:
{{{
eg:obs1  a qb:Observation;
    qb:dataSet eg:dataset1;
    sdmx-dimension:refTime "30-07-2010"^^xsd:date;
    qb:measureType eg-measure:quantity;
    eg-measure:quantity 42 .

eg:obs2  a qb:Observation;
    qb:dataSet eg:dataset1;
    sdmx-dimension:refTime "30-07-2010"^^xsd:date;
    qb:measureType eg-measure:weight;
    eg-measure:quantity 1.3 .

eg:dataset1 a qb:DataSet;
    qb:structure eg:dsd1 .
}}}

Note that in the RDF representation there is no need for a separate "primary measure" which subsumes each of the individual measures, those individual measures are used directly. We'll cover how round tripping of the primary measure is handled shortly.

=== Multiple measure observations ===

If a data set publisher wishes to allow multiple measures on a single observation (e.g. for raw sensor data or individual shipment data) then they can do so. You simply declare all the measures but provide no measure dimension (that is no, instance of  `qb:MeasureDimensionProperty`).

In that case the above example would look like:

{{{
eg:dsd2 a qb:DataStructureDefinition;
    rdfs:comment "shippments by time with multiple measures"@en;
    qb:component 
        [ qb:componentProperty  sdmx-dimension:refTime; ],
        [ qb:componentProperty  eg-measure:quantity; ],
        [ qb:componentProperty  eg-measure:weight; ];
    .

eg:obs2a  a qb:Observation;
    qb:dataSet eg:dataset2;
    sdmx-dimension:refTime "30-07-2010"^^xsd:date;
    eg-measure:quantity 1.3 ;
    eg-measure:quantity 42 ;
    .

eg:dataset2 a qb:DataSet;
    qb:structure eg:dsd2 .
}}}

In documentation the vocabulary we would be clear on the pros- and cons- of using MD v. MMO type modelling. Including issues of SDMX compatibility, the fundamental nature of the data (record structured v. independent measures) and the ability to directly address and annotate individual measured values as opposed to just observations.

=== SDMX Specialization ===

In the SDMX vocabulary we will define `sdmx:DataStructureDefinition` as a subclass of `qb:DataStructureDefinition`. 

A data set corresponding to an `sdmx:DataStructureDefinition` has to meet the additional constraint that each observation only has a single measured value. Either because the set only declares a single measure or because it declares a measure dimension.

There may be other constraints on `sdmx:DataStructureDefinition` to ensure SDMX compatibility.

In the case of a data set with N measures an SDMX DSD will typically declare N + 1 measures, the N individual measures and 1 additional Primary Measure, typically OBS_VALUE.
In the RDF representation the primary measure is not needed on the individual observations but needs to be recorded in the DSD to enable round tripping. We will enable this by providing `sdmx:primaryMeasure` which links a `sdmx:DataStructureDefinition` to a `qb:MeasureProperty`.

=== Attributes ===

In the measure dimension approach (or where there is only a single measure anyway) then attributes such as `sdmx-attribute:unitMeasure` and `sdmx-attribute:unitMultiplier` can be attached to individual Observations or to higher attachment levels  - Slice, DataSet or the MeasureProperty itself.

In the multiple measures (MMO) approach then those attributes can only be usefully attached to the MeasureProperty.

If a dataset requires attribute attachment to an individual measure on an individual observation (e.g. to indicate a Estimated instead of a Measured value) then the SDMX-compatible measure dimension representation must be used.

=== Slicing ===

Using the measure dimension approach it is possible to define a slice of observations corresponding to a single measure (i.e. fixing the value of the measure dimension).

We contemplated machinery to support this even within an MMO model (through the use of magic dimension) but rejected this for now. If you need to slice along measures then use the measure dimension representation. We will document this as possible future extension point depending on experience with the vocabulary.
=== DSD aliases ===